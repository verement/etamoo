{"name":"EtaMOO","tagline":"A new implementation of the LambdaMOO server","body":"\r\nImportant!\r\n==========\r\n\r\n**This is experimental software. While it is now mostly functional, it is not\r\n  yet fully complete.**\r\n\r\n_Until such time as the EtaMOO database format is well tested and considered\r\nstable, please make and keep LambdaMOO-format backup copies of your EtaMOO\r\ndatabases._\r\n\r\nAbout\r\n=====\r\n\r\nEtaMOO is a new implementation of the LambdaMOO server written in Haskell.\r\n\r\n[LambdaMOO][] is a network-accessible, multi-user, programmable, interactive\r\nsystem well-suited to the construction of text-based adventure games,\r\nconferencing systems, and other collaborative software.\r\n\r\n  [LambdaMOO]: http://www.ipomoea.org/moo/\r\n\r\nEtaMOO differs from LambdaMOO in a few significant ways:\r\n\r\n  * EtaMOO is multi-threaded. MOO tasks run concurrently, producing network\r\n    output and changes to the database in isolated transactions that are\r\n    committed only when not in conflict with any other transaction. (In cases\r\n    of conflict, transactions are automatically retried.) Separate threads are\r\n    also used for network connection management, so for example name lookups\r\n    do not block the entire server.\r\n\r\n  * EtaMOO uses [LMDB][] as a persistent backing store for the MOO database.\r\n    Changes are committed on an ongoing basis for instantaneous crash\r\n    recovery; checkpoints merely perform a quick synchronization, and are\r\n    otherwise unnecessary. EtaMOO provides mechanisms for importing and\r\n    exporting LambdaMOO-format databases to and from the EtaMOO-native format.\r\n\r\n  * EtaMOO is Unicode-aware, and will eventually include support for Unicode\r\n    MOO strings via compile-time build option.\r\n\r\n  * EtaMOO supports 64-bit MOO integers via compile-time build option.\r\n\r\n  * EtaMOO natively supports string-key association lists with efficient\r\n    lookup and update operations; the list index syntax has been extended to\r\n    allow _`alist`_`[`_`key`_`]` and _`alist`_`[`_`key`_`] = `_`value`_ for\r\n    string *`key`*s whenever *`alist`* is a well-formed association list.\r\n\r\n  * EtaMOO supports several additional hashing algorithms besides MD5,\r\n    including SHA-1, SHA-2, SHA-3, and RIPEMD-160, via optional argument to\r\n    `string_hash()`, `binary_hash()`, and `value_hash()`. Hash digests may\r\n    also optionally be returned as binary strings.\r\n\r\n  * EtaMOO internally handles binary strings in an efficient manner, and only\r\n    translates to and from the special MOO *binary string* syntax upon demand.\r\n    For example, passing a binary string read from the network directly to\r\n    `decode_binary()` does not suffer a round trip through the *binary string*\r\n    representation.\r\n\r\n  * EtaMOO supports fractional second delays in `suspend()` and `fork`.\r\n\r\n  * EtaMOO supports IPv6.\r\n\r\n  [LMDB]: http://symas.com/mdb/\r\n\r\nThe implementation of EtaMOO otherwise closely follows the specifications of\r\nthe [LambdaMOO Programmer's Manual][], and should be compatible with most\r\nLambdaMOO databases as of about version 1.8.3 of the LambdaMOO server code.\r\n\r\n  [LambdaMOO Programmer's Manual]: http://www.ipomoea.org/moo/#progman\r\n\r\nInstalling\r\n----------\r\n\r\nEtaMOO is built with [Cabal][], the Haskell package manager. In the simplest\r\ncase, running:\r\n\r\n    cabal install EtaMOO\r\n\r\nshould automatically download, build, and install the `etamoo` executable\r\nafter doing the same for all of its Haskell dependencies.\r\n\r\nCabal itself is part of the [Haskell Platform][] which is available for many\r\ndistributions and platforms.\r\n\r\n  [Cabal]: http://www.haskell.org/cabal/\r\n  [Haskell Platform]: http://www.haskell.org/platform/\r\n\r\nThere are a few options you can give to `cabal install` to customize your\r\nbuild:\r\n\r\n| Option                | Feature                                       |\r\n| --------------------- | --------------------------------------------- |\r\n| `-j`                  | Build in parallel using multiple processors   |\r\n| `-f llvm`             | Use GHC's LLVM backend to compile the code    |\r\n| `-f 64bit`            | Enable 64-bit MOO integers                    |\r\n\r\nEtaMOO has non-Haskell dependencies on three external libraries: _liblmdb_ for\r\ndatabase persistence, _libpcre_ (with UTF-8 support enabled) for regular\r\nexpression matching, and, possibly, _libcrypt_ (often part of the standard\r\nlibraries) for the MOO `crypt()` built-in function. You should ensure you have\r\nthese available before installing EtaMOO (e.g. on Debian-derived systems,\r\n`sudo apt-get install liblmdb-dev libpcre3-dev`).\r\n\r\nRunning\r\n-------\r\n\r\n`etamoo` is nearly a drop-in replacement for the LambdaMOO `moo` executable;\r\nthe main difference is that `etamoo` takes a single database path, rather than\r\nboth input and output paths. You can run `etamoo --help` for a command-line\r\nsynopsis.\r\n\r\nEtaMOO uses a native binary database format that allows quick loading and\r\ncheckpointing, and instantaneous crash recovery. You can create a native\r\ndatabase from a LambdaMOO-format database by using `etamoo --import`. You can\r\nalso go the other way and convert an EtaMOO database back to a\r\nLambdaMOO-format database with `etamoo --export`.\r\n\r\nIf you don't already have a database, you can find LambdaMOO-format cores for\r\nvarious MOOs online -- for example there is the venerable [LambdaCore][], or\r\nyou can request a character on [Waterpoint][] and then perform a live\r\n[JHCore extraction][]. (Note that Waterpoint's core extraction process\r\nrequires running an actual LambdaMOO server executable on the precore database\r\nto obtain the final core database; EtaMOO cannot yet do this itself.)\r\n\r\n  [LambdaCore]: http://ftp.lambda.moo.mud.org/pub/MOO/\r\n  [Waterpoint]: http://waterpoint.moo.mud.org/\r\n  [JHCore extraction]: http://waterpoint.moo.mud.org:8080/core-extraction/\r\n\r\nBy default, EtaMOO will make use of all available CPUs for maximum\r\nparallelism. If you'd rather limit the number of processors EtaMOO uses, you\r\ncan use the command-line option `+RTS -N`_`n`_` -RTS` where _`n`_ is the\r\nnumber of processors to use.\r\n\r\nIf you want to enable statistics from the `memory_usage()` built-in function,\r\nyou will need to add `+RTS -T -RTS` to the command line options.\r\n\r\nLimitations\r\n-----------\r\n\r\nThe following LambdaMOO features are currently unsupported:\r\n\r\n  * The `.program` intrinsic command\r\n  * The `verb_cache_stats()` and `log_cache_stats()` built-in functions\r\n  * Importing, exporting, or checkpointing of queued tasks in the database\r\n    file\r\n  * Task time limits (ticks are counted, but seconds are not)\r\n  * The `NP_SINGLE` and `NP_LOCAL` network protocols (i.e. stdin/stdout,\r\n    UNIX-domain sockets, and/or named pipes; only TCP/IP is supported)\r\n  * Customizing `OUT_OF_BAND_PREFIX` and `OUT_OF_BAND_QUOTE_PREFIX` (these are\r\n    currently fixed as `#$#` and `#$\"`, respectively)\r\n  * The `IGNORE_PROP_PROTECTED` compilation option\r\n  * `$server_options.name_lookup_timeout`\r\n\r\nSee also the `DIFFERENCES.md` file for other differences between EtaMOO and\r\nLambdaMOO.\r\n\r\nHacking\r\n-------\r\n\r\n[Documentation][] is available for the various types, data structures, and\r\nfunctions used internally by EtaMOO.\r\n\r\n  [Documentation]: http://verement.github.io/etamoo/doc/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}